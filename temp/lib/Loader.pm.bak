package Loader;
use strict;
use warnings;
use parent qw( Exporter );
our @EXPORT = qw( machine match );
use Scalar::Util qw(reftype blessed);

use Data::Dumper::Concise;

our @pipeline = ();
our $OM = our $current = [
    [ undef, undef, undef, undef, [] ]
];

sub add_to_pipe {
    push @pipeline, @_;
}

sub machine (&) {
    my $block = shift;
    $block->();
    my @stack = ();
    push @pipeline, $current;
    return @pipeline;
}

our $nested = undef;
our @stack = ();
sub match {
    my $to_match = shift;
    my @to_add = @_;
    warn "IN " . Dumper($to_match, \@to_add ) . "--------\n";
    my $match_type = reftype $to_match || 'STRING';
    my $add_type   = undef;

    my $frame = [ $match_type, $to_match, $add_type, undef, [] ];
    if (scalar @to_add > 1 ) {
        if ( reftype $to_add[0] == undef ) {
            $frame->[2] = 'PARENT';
        }
        else {
            $frame->[2] = reftype $to_add[0];
            $frame->[3] = $to_add[0];
        }
        #$nested = 1;
        #$current = $frame;
        #return $current;
    }
    else {
        $frame->[2] = reftype $to_add[0];
        $frame->[3] = $to_add[0];
    }
    push @pipeline, $frame;
    #return $frame;
}

1;